{
    "pipes": [],
    "interfaces": [
        {
            "name": "Employee",
            "id": "interface-Employee-5e67d89c6b4c002ef49d9f022d713399",
            "file": "src/app/state/employeeState/employee.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Employee {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  contact: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "contact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UserData",
            "id": "interface-UserData-76baa8b4b4c82145bcfb539588b828b8",
            "file": "src/app/models/userData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserData {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  IsAdmin?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "IsAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-73ac5520f62647ce2a6821447617b899",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "authentication",
                    "defaultValue": "new BehaviorSubject({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "checkLogin",
                    "args": [
                        {
                            "name": "UserData",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "UserData",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthUser",
                    "args": [],
                    "optional": false,
                    "returnType": "UserData[]",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UserData",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsersData",
                    "args": [],
                    "optional": false,
                    "returnType": "UserData[]",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "formData",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "UserData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAdmin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAuthUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "uudId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { UserData } from '../models/userData';\r\nimport { Store } from '@ngxs/store';\r\nimport { DeleteUser } from './../state/userState/user.action';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private store: Store) {}\r\n\r\n  authentication = new BehaviorSubject({});\r\n\r\n  getUsersData(): UserData[] {\r\n    let data = JSON.parse(localStorage.getItem('UsersData'));\r\n    return data ?? [];\r\n  }\r\n  getAuthUser(): UserData[] {\r\n    return JSON.parse(localStorage.getItem('AuthUser'));\r\n  }\r\n\r\n  checkLogin(UserData: UserData): boolean {\r\n    const jsonData = this.getUsersData();\r\n    let getUser = {};\r\n\r\n    getUser = jsonData.find(\r\n      (data) =>\r\n        data.email == UserData.email && data.password == UserData.password\r\n    );\r\n    if (!getUser) {\r\n      return false;\r\n    } else {\r\n      const data = {\r\n        id: getUser['id'],\r\n        name: getUser['name'],\r\n        email: getUser['email'],\r\n        password: getUser['password'],\r\n        isAdmin: getUser['isAdmin'],\r\n      };\r\n      localStorage.setItem('AuthUser', JSON.stringify(data));\r\n      return true;\r\n    }\r\n  }\r\n  uudId(): string {\r\n    return 'xxxx-4xxx-yxxx'.replace(/[xy]/g, function (c) {\r\n      let r = (Math.random() * 6) | 0,\r\n        v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n      return v.toString(6);\r\n    });\r\n  }\r\n  getEmail(email: string): UserData {\r\n    const jsonData = this.getUsersData();\r\n    return jsonData.find((data) => data.email == email);\r\n  }\r\n  register(formData: UserData, isAdmin: boolean): void {\r\n    const getMail = this.getEmail(formData.email);\r\n    if (getMail) {\r\n      alert('Email id already exist !!');\r\n    } else {\r\n      const jsonData = this.getUsersData();\r\n      const data = {\r\n        id: this.uudId(),\r\n        name: formData.name,\r\n        email: formData.email,\r\n        password: formData.password,\r\n        isAdmin: isAdmin,\r\n      };\r\n      jsonData.push(data);\r\n      localStorage.setItem('UsersData', JSON.stringify(jsonData));\r\n    }\r\n  }\r\n\r\n  removeAuthUser(): void {\r\n    this.store.dispatch(new DeleteUser());\r\n    localStorage.removeItem('AuthUser');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EmployeeService",
            "id": "injectable-EmployeeService-6d0656aef1778e660765f9f3dcbea6d4",
            "file": "src/app/services/employee.service.ts",
            "properties": [
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Employee[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "EmployeeState.getEmployee"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getEmployeeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Employee",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [
                        {
                            "name": "totalRecords",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pagesize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "totalRecords",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pagesize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDeleteEmployeeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditEmployeeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnInit } from '@angular/core';\r\nimport { Select } from '@ngxs/store';\r\nimport { Store } from '@ngxs/store';\r\nimport { BsModalService } from 'ngx-bootstrap/modal';\r\nimport { Observable } from 'rxjs';\r\nimport { DeleteModalComponent } from '../components/main/employees/delete-modal/delete-modal.component';\r\nimport { editEmployeeComponent } from '../components/main/employees/edit-employee/edit-employee.component';\r\nimport { getEmployee } from '../state/employeeState/employee.action';\r\nimport { EmployeeState } from '../state/employeeState/employee.state';\r\nimport { Employee } from './../state/employeeState/employee';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmployeeService implements OnInit {\r\n  constructor(private store: Store, private modalService: BsModalService) {}\r\n  ngOnInit() {\r\n    this.store.dispatch(new getEmployee());\r\n  }\r\n  @Select(EmployeeState.getEmployee) employee: Observable<Employee[]>;\r\n\r\n  getEmployeeById(id:string): Employee {\r\n    let employeesData: Employee[];\r\n    this.employee.subscribe((val) => {\r\n      employeesData = val;\r\n    });\r\n    return employeesData?.find((val) => val.id == id);\r\n  }\r\n  openEditEmployeeModal(id:any): void {\r\n    const employeeData = this.getEmployeeById(id);\r\n    const initialState = {\r\n      id: id,\r\n      employeeData: employeeData,\r\n    };\r\n    this.modalService.show(editEmployeeComponent, { initialState });\r\n  }\r\n  openDeleteEmployeeModal(id:any): void {\r\n    const initialState = {\r\n      id: id,\r\n    };\r\n    this.modalService.show(DeleteModalComponent, { initialState });\r\n  }\r\n\r\n  getPageCount(totalRecords: number, pagesize: number): number {\r\n    let totalPage = 0;\r\n    if (totalRecords > 0 && pagesize > 0) {\r\n      const pageCount = totalRecords / pagesize;\r\n      const roundedPageCount = Math.floor(pageCount);\r\n      totalPage =\r\n        roundedPageCount < pageCount ? roundedPageCount + 1 : roundedPageCount;\r\n    }\r\n    return totalPage;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EmployeeState",
            "id": "injectable-EmployeeState-71e07f6a195e9a5831881f7825a507e0",
            "file": "src/app/state/employeeState/employee.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "AddNewEmployee",
                    "args": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "addNewEmployee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "addNewEmployee"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "addNewEmployee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DeleteEmployee",
                    "args": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "DeleteEmployee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DeleteEmployee"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "DeleteEmployee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEmployee",
                    "args": [
                        {
                            "name": "state",
                            "type": "EmployeeStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "EmployeeStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetEmployee",
                    "args": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "getEmployee"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateEmployee",
                    "args": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdateEmployee",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateEmployee"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<EmployeeStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdateEmployee",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { Employee } from './employee';\r\nimport {\r\n  UpdateEmployee,\r\n  getEmployee,\r\n  DeleteEmployee,\r\n  addNewEmployee,\r\n} from './employee.action';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StateService } from '../../services/state.service';\r\n\r\nexport class EmployeeStateModel {\r\n  employees: Employee[];\r\n}\r\n\r\n@State<EmployeeStateModel>({\r\n  name: 'employees',\r\n  defaults: {\r\n    employees: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class EmployeeState {\r\n  constructor(private stateService: StateService) {}\r\n  @Selector()\r\n  static getEmployee(state: EmployeeStateModel) {\r\n    return state.employees;\r\n  }\r\n\r\n  @Action(getEmployee)\r\n  GetEmployee({ getState, patchState }: StateContext<EmployeeStateModel>) {\r\n    return this.stateService.getEmployeeData().pipe(\r\n      tap((data) => {\r\n        const state = getState();\r\n        patchState({\r\n          employees: data,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action(addNewEmployee)\r\n  AddNewEmployee(\r\n    { getState, patchState }: StateContext<EmployeeStateModel>,\r\n    { data }: addNewEmployee\r\n  ) {\r\n    const state = getState();\r\n    const employeesData = [...state.employees];\r\n    employeesData.push(data);\r\n    patchState({\r\n      employees: employeesData,\r\n    });\r\n  }\r\n\r\n  @Action(UpdateEmployee)\r\n  UpdateEmployee(\r\n    { getState, patchState }: StateContext<EmployeeStateModel>,\r\n    { id, data }: UpdateEmployee\r\n  ) {\r\n    const state = getState();\r\n    const employeesData = [...state.employees];\r\n    const dataIndex = employeesData.findIndex((item) => item.id === id);\r\n    employeesData[dataIndex] = data;\r\n    patchState({\r\n      employees: employeesData,\r\n    });\r\n  }\r\n  @Action(DeleteEmployee)\r\n  DeleteEmployee(\r\n    { getState, patchState }: StateContext<EmployeeStateModel>,\r\n    { id }: DeleteEmployee\r\n  ) {\r\n    const state = getState();\r\n    const filteredArray = state.employees.filter((item) => item.id != id);\r\n    patchState({\r\n      employees: filteredArray,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StateService",
            "id": "injectable-StateService-d18576f19c3b08e2db888bfdc4e515d2",
            "file": "src/app/services/state.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEmployeeData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Employee[]>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUsersData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserData[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { UserData } from '../models/userData';\r\nimport { Employee } from '../state/employeeState/employee';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StateService {\r\n  constructor(private store: Store) {}\r\n  getUsersData(): Observable<UserData[]> {\r\n    let data = JSON.parse(localStorage.getItem('AuthUser'));\r\n    return of(data ?? []);\r\n  }\r\n\r\n  getEmployeeData(): Observable<Employee[]> {\r\n    let data = JSON.parse(localStorage.getItem('EmployeesData'));\r\n    return of(data ?? []);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserDataState",
            "id": "injectable-UserDataState-bcdffcbc4690ed642d8b69a875e257d3",
            "file": "src/app/state/userState/user.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "DeleteUser",
                    "args": [
                        {
                            "type": "StateContext<UserDataStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "DeleteUser"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<UserDataStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetUser",
                    "args": [
                        {
                            "type": "StateContext<UserDataStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "getUsers"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<UserDataStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [
                        {
                            "name": "state",
                            "type": "UserDataStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "UserDataStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UpdateUser",
                    "args": [
                        {
                            "type": "StateContext<UserDataStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "UpdateUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "UpdateUser"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<UserDataStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "UpdateUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { UserData } from '../../models/userData';\r\n\r\nimport { UpdateUser, getUsers, DeleteUser } from './user.action';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StateService } from '../../services/state.service';\r\n\r\nexport class UserDataStateModel {\r\n  usersData: UserData[];\r\n}\r\n@State<UserDataStateModel>({\r\n  name: 'usersData',\r\n  defaults: {\r\n    usersData: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class UserDataState {\r\n  constructor(private stateService: StateService) {}\r\n  @Selector()\r\n  static getUsers(state: UserDataStateModel) {\r\n    return state.usersData;\r\n  }\r\n\r\n  @Action(getUsers)\r\n  GetUser({ getState, patchState }: StateContext<UserDataStateModel>) {\r\n    return this.stateService.getUsersData().pipe(\r\n      tap((result) => {\r\n        const state = getState();\r\n        patchState({\r\n          usersData: result,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action(UpdateUser)\r\n  UpdateUser(\r\n    { getState, patchState }: StateContext<UserDataStateModel>,\r\n    { id, data }: UpdateUser\r\n  ) {\r\n    const state = getState();\r\n    const users = [...state.usersData];\r\n    const dataIndex = users.findIndex((item) => item.id === id);\r\n    users[dataIndex] = data;\r\n    patchState({\r\n      usersData: users,\r\n    });\r\n  }\r\n  @Action(DeleteUser)\r\n  DeleteUser({ getState, patchState }: StateContext<UserDataStateModel>) {\r\n    const state = getState();\r\n    patchState({\r\n      usersData: null,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "stateService",
                        "type": "StateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-b7b6e9e5af64323781882e9812452219",
            "file": "src/app/services/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private route: Router, private authService: AuthService) {}\r\n  canActivate(): boolean {\r\n    if (this.authService.getAuthUser()) {\r\n      return true;\r\n    } else {\r\n      this.route.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "addNewEmployee",
            "id": "class-addNewEmployee-1a725d3a1f4ca36e6553d5f2fa63431e",
            "file": "src/app/state/employeeState/employee.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Employee } from './employee';\r\n\r\nexport class getEmployee {\r\n  static readonly type = '[Employee] GetEmployee';\r\n}\r\n\r\nexport class addNewEmployee {\r\n  static readonly type = '[Employee] AddNewEmployee';\r\n  constructor(public data: Employee) {}\r\n}\r\nexport class UpdateEmployee {\r\n  static readonly type = '[Employee] UpdateEmployee';\r\n  constructor(public id: string, public data: Employee) {}\r\n}\r\n\r\nexport class DeleteEmployee {\r\n  static readonly type = '[Employee] DeleteEmployee';\r\n  constructor(public id: string) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Employee] AddNewEmployee'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteEmployee",
            "id": "class-DeleteEmployee-1a725d3a1f4ca36e6553d5f2fa63431e",
            "file": "src/app/state/employeeState/employee.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Employee } from './employee';\r\n\r\nexport class getEmployee {\r\n  static readonly type = '[Employee] GetEmployee';\r\n}\r\n\r\nexport class addNewEmployee {\r\n  static readonly type = '[Employee] AddNewEmployee';\r\n  constructor(public data: Employee) {}\r\n}\r\nexport class UpdateEmployee {\r\n  static readonly type = '[Employee] UpdateEmployee';\r\n  constructor(public id: string, public data: Employee) {}\r\n}\r\n\r\nexport class DeleteEmployee {\r\n  static readonly type = '[Employee] DeleteEmployee';\r\n  constructor(public id: string) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Employee] DeleteEmployee'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteUser",
            "id": "class-DeleteUser-293941e08daf8fc445c31f8eb8a529da",
            "file": "src/app/state/userState/user.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserData } from '../../models/userData';\r\n\r\n// for authusers data\r\nexport class UpdateUser {\r\n  static readonly type = '[UserData] UpdateUser';\r\n  constructor(public id: string, public data: UserData) {}\r\n}\r\nexport class getUsers {\r\n  static readonly type = '[UserData] GetUser';\r\n}\r\nexport class DeleteUser {\r\n  static readonly type = '[UserData] DeleteUser';\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[UserData] DeleteUser'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EmployeeStateModel",
            "id": "class-EmployeeStateModel-71e07f6a195e9a5831881f7825a507e0",
            "file": "src/app/state/employeeState/employee.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { Employee } from './employee';\r\nimport {\r\n  UpdateEmployee,\r\n  getEmployee,\r\n  DeleteEmployee,\r\n  addNewEmployee,\r\n} from './employee.action';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StateService } from '../../services/state.service';\r\n\r\nexport class EmployeeStateModel {\r\n  employees: Employee[];\r\n}\r\n\r\n@State<EmployeeStateModel>({\r\n  name: 'employees',\r\n  defaults: {\r\n    employees: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class EmployeeState {\r\n  constructor(private stateService: StateService) {}\r\n  @Selector()\r\n  static getEmployee(state: EmployeeStateModel) {\r\n    return state.employees;\r\n  }\r\n\r\n  @Action(getEmployee)\r\n  GetEmployee({ getState, patchState }: StateContext<EmployeeStateModel>) {\r\n    return this.stateService.getEmployeeData().pipe(\r\n      tap((data) => {\r\n        const state = getState();\r\n        patchState({\r\n          employees: data,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action(addNewEmployee)\r\n  AddNewEmployee(\r\n    { getState, patchState }: StateContext<EmployeeStateModel>,\r\n    { data }: addNewEmployee\r\n  ) {\r\n    const state = getState();\r\n    const employeesData = [...state.employees];\r\n    employeesData.push(data);\r\n    patchState({\r\n      employees: employeesData,\r\n    });\r\n  }\r\n\r\n  @Action(UpdateEmployee)\r\n  UpdateEmployee(\r\n    { getState, patchState }: StateContext<EmployeeStateModel>,\r\n    { id, data }: UpdateEmployee\r\n  ) {\r\n    const state = getState();\r\n    const employeesData = [...state.employees];\r\n    const dataIndex = employeesData.findIndex((item) => item.id === id);\r\n    employeesData[dataIndex] = data;\r\n    patchState({\r\n      employees: employeesData,\r\n    });\r\n  }\r\n  @Action(DeleteEmployee)\r\n  DeleteEmployee(\r\n    { getState, patchState }: StateContext<EmployeeStateModel>,\r\n    { id }: DeleteEmployee\r\n  ) {\r\n    const state = getState();\r\n    const filteredArray = state.employees.filter((item) => item.id != id);\r\n    patchState({\r\n      employees: filteredArray,\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "employees",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "getEmployee",
            "id": "class-getEmployee-1a725d3a1f4ca36e6553d5f2fa63431e",
            "file": "src/app/state/employeeState/employee.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Employee } from './employee';\r\n\r\nexport class getEmployee {\r\n  static readonly type = '[Employee] GetEmployee';\r\n}\r\n\r\nexport class addNewEmployee {\r\n  static readonly type = '[Employee] AddNewEmployee';\r\n  constructor(public data: Employee) {}\r\n}\r\nexport class UpdateEmployee {\r\n  static readonly type = '[Employee] UpdateEmployee';\r\n  constructor(public id: string, public data: Employee) {}\r\n}\r\n\r\nexport class DeleteEmployee {\r\n  static readonly type = '[Employee] DeleteEmployee';\r\n  constructor(public id: string) {}\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[Employee] GetEmployee'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "getUsers",
            "id": "class-getUsers-293941e08daf8fc445c31f8eb8a529da",
            "file": "src/app/state/userState/user.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserData } from '../../models/userData';\r\n\r\n// for authusers data\r\nexport class UpdateUser {\r\n  static readonly type = '[UserData] UpdateUser';\r\n  constructor(public id: string, public data: UserData) {}\r\n}\r\nexport class getUsers {\r\n  static readonly type = '[UserData] GetUser';\r\n}\r\nexport class DeleteUser {\r\n  static readonly type = '[UserData] DeleteUser';\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[UserData] GetUser'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateEmployee",
            "id": "class-UpdateEmployee-1a725d3a1f4ca36e6553d5f2fa63431e",
            "file": "src/app/state/employeeState/employee.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Employee } from './employee';\r\n\r\nexport class getEmployee {\r\n  static readonly type = '[Employee] GetEmployee';\r\n}\r\n\r\nexport class addNewEmployee {\r\n  static readonly type = '[Employee] AddNewEmployee';\r\n  constructor(public data: Employee) {}\r\n}\r\nexport class UpdateEmployee {\r\n  static readonly type = '[Employee] UpdateEmployee';\r\n  constructor(public id: string, public data: Employee) {}\r\n}\r\n\r\nexport class DeleteEmployee {\r\n  static readonly type = '[Employee] DeleteEmployee';\r\n  constructor(public id: string) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Employee",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[Employee] UpdateEmployee'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateUser",
            "id": "class-UpdateUser-293941e08daf8fc445c31f8eb8a529da",
            "file": "src/app/state/userState/user.action.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserData } from '../../models/userData';\r\n\r\n// for authusers data\r\nexport class UpdateUser {\r\n  static readonly type = '[UserData] UpdateUser';\r\n  constructor(public id: string, public data: UserData) {}\r\n}\r\nexport class getUsers {\r\n  static readonly type = '[UserData] GetUser';\r\n}\r\nexport class DeleteUser {\r\n  static readonly type = '[UserData] DeleteUser';\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "UserData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "UserData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[UserData] UpdateUser'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserDataStateModel",
            "id": "class-UserDataStateModel-bcdffcbc4690ed642d8b69a875e257d3",
            "file": "src/app/state/userState/user.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { State, Action, StateContext, Selector } from '@ngxs/store';\r\nimport { UserData } from '../../models/userData';\r\n\r\nimport { UpdateUser, getUsers, DeleteUser } from './user.action';\r\nimport { Injectable } from '@angular/core';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StateService } from '../../services/state.service';\r\n\r\nexport class UserDataStateModel {\r\n  usersData: UserData[];\r\n}\r\n@State<UserDataStateModel>({\r\n  name: 'usersData',\r\n  defaults: {\r\n    usersData: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class UserDataState {\r\n  constructor(private stateService: StateService) {}\r\n  @Selector()\r\n  static getUsers(state: UserDataStateModel) {\r\n    return state.usersData;\r\n  }\r\n\r\n  @Action(getUsers)\r\n  GetUser({ getState, patchState }: StateContext<UserDataStateModel>) {\r\n    return this.stateService.getUsersData().pipe(\r\n      tap((result) => {\r\n        const state = getState();\r\n        patchState({\r\n          usersData: result,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action(UpdateUser)\r\n  UpdateUser(\r\n    { getState, patchState }: StateContext<UserDataStateModel>,\r\n    { id, data }: UpdateUser\r\n  ) {\r\n    const state = getState();\r\n    const users = [...state.usersData];\r\n    const dataIndex = users.findIndex((item) => item.id === id);\r\n    users[dataIndex] = data;\r\n    patchState({\r\n      usersData: users,\r\n    });\r\n  }\r\n  @Action(DeleteUser)\r\n  DeleteUser({ getState, patchState }: StateContext<UserDataStateModel>) {\r\n    const state = getState();\r\n    patchState({\r\n      usersData: null,\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "usersData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ColorPickerDirective",
            "id": "directive-ColorPickerDirective-f244f663bb5897b5f9d1e556bc7c8e02",
            "file": "src/app/directives/color-picker.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  Input,\r\n  OnChanges,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appColorPicker]',\r\n})\r\nexport class ColorPickerDirective implements OnChanges {\r\n  constructor(public element: ElementRef, public render: Renderer2) {}\r\n  @Input('appColorPicker') color = 'green';\r\n\r\n  ngOnChanges() :void{\r\n    this.render.setStyle(\r\n      this.element.nativeElement,\r\n      'background-color',\r\n      this.color\r\n    );\r\n  }\r\n}\r\n",
            "selector": "[appColorPicker]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appColorPicker",
                    "defaultValue": "'green'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "render",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "render",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddEmployeeComponent",
            "id": "component-AddEmployeeComponent-ae9eb22f259df99b0efbfe76358b29b7",
            "file": "src/app/components/main/employees/add-employee/add-employee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-employee",
            "styleUrls": [
                "./add-employee.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-employee.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEmployeeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addEmployee",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from './../../../../services/auth.service';\r\nimport { Store } from '@ngxs/store';\r\nimport { addNewEmployee } from '../../../../state/employeeState/employee.action';\r\n\r\n@Component({\r\n  selector: 'app-add-employee',\r\n  templateUrl: './add-employee.component.html',\r\n  styleUrls: ['./add-employee.component.scss'],\r\n})\r\nexport class AddEmployeeComponent implements OnInit {\r\n  modalRef: BsModalRef;\r\n  constructor(\r\n    public fb: FormBuilder,\r\n    public bsModalRef: BsModalRef,\r\n    public authService: AuthService,\r\n    public store: Store\r\n  ) {}\r\n  addEmployeeForm: FormGroup;\r\n  ngOnInit(): void {\r\n    this.addEmployeeForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'),\r\n        ],\r\n      ],\r\n      contact: ['', Validators.required],\r\n    });\r\n  }\r\n  addEmployee(): void {\r\n    const form = this.addEmployeeForm.value;\r\n    const dataObject = {\r\n      id: this.authService.uudId(),\r\n      name: form.name,\r\n      email: form.email,\r\n      contact: form.contact,\r\n    };\r\n    console.log( this.authService.uudId())\r\n    this.store.dispatch(new addNewEmployee(dataObject));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n  padding: 4px 2px;\r\n  width: 8%;\r\n  font-size: 17px;\r\n  text-align-last: right;\r\n}\r\n",
                    "styleUrl": "./add-employee.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Add New</h5>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <form [formGroup]=\"addEmployeeForm\">\r\n    <div class=\"from-group\">\r\n      <div class=\"inputDiv w-100 d-inline-flex mb-2\">\r\n        <input\r\n          class=\"form-control\"\r\n          type=\"text\"\r\n          formControlName=\"name\"\r\n          placeholder=\"Full Name\"\r\n        />\r\n        <span\r\n          ><i\r\n            class=\"fa fa-check\"\r\n            *ngIf=\"addEmployeeForm.controls.name.valid\"\r\n          ></i\r\n        ></span>\r\n      </div>\r\n      <div class=\"inputDiv w-100 d-inline-flex mb-2\">\r\n        <input\r\n          class=\"form-control\"\r\n          type=\"email\"\r\n          formControlName=\"email\"\r\n          placeholder=\"Email\"\r\n        />\r\n        <span\r\n          ><i\r\n            class=\"fa fa-check\"\r\n            *ngIf=\"addEmployeeForm.controls.email.valid\"\r\n          ></i\r\n        ></span>\r\n      </div>\r\n\r\n      <div class=\"inputDiv w-100 d-inline-flex mb-2\">\r\n        <input\r\n          class=\"form-control\"\r\n          type=\"tel\"\r\n          formControlName=\"contact\"\r\n          placeholder=\"Contact\"\r\n        />\r\n        <span\r\n          ><i\r\n            class=\"fa fa-check\"\r\n            *ngIf=\"addEmployeeForm.controls.contact.valid\"\r\n          ></i\r\n        ></span>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button\r\n    type=\"button\"\r\n    [disabled]=\"this.addEmployeeForm.invalid\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"addEmployee(); bsModalRef.hide()\"\r\n  >\r\n    Save\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-warning\" (click)=\"bsModalRef.hide()\">\r\n    Cancel\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-189a8105d0f549130d37314716a76ee9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'User Management'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'User Management';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\n<app-header></app-header>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ContactComponent",
            "id": "component-ContactComponent-b5f77b354fc3eb28fd4655a85d47f3d0",
            "file": "src/app/components/main/contact/contact.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact",
            "styleUrls": [
                "./contact.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contact',\r\n  templateUrl: './contact.component.html',\r\n  styleUrls: ['./contact.component.scss'],\r\n})\r\nexport class ContactComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\r\n  .address {\r\n    margin-left: inherit;\r\n  }\r\n}\r\n",
                    "styleUrl": "./contact.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row m-3\">\r\n  <h3>Contact US</h3>\r\n  <div class=\"col-md-12 p-3 address\">\r\n    <h4>WebOsmotic</h4>\r\n    <p>\r\n      A-6 GF Someshwar Nagar,<br />\r\n      Bhatar Road, Joggers Park,<br />\r\n      Gujarat, Surat-395007,<br />\r\n      P: (+91) 8469499488.\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DeleteModalComponent",
            "id": "component-DeleteModalComponent-366ab1be1ad77e8bb36d235accaa2e4a",
            "file": "src/app/components/main/employees/delete-modal/delete-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-modal",
            "styleUrls": [
                "./delete-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteEmployee",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { DeleteEmployee } from '../../../../state/employeeState/employee.action';\r\n\r\n@Component({\r\n  selector: 'app-delete-modal',\r\n  templateUrl: './delete-modal.component.html',\r\n  styleUrls: ['./delete-modal.component.scss'],\r\n})\r\nexport class DeleteModalComponent implements OnInit {\r\n  id: string;\r\n  modalRef: BsModalRef;\r\n  constructor(public bsModalRef: BsModalRef, public store: Store) {}\r\n\r\n  ngOnInit(): void {}\r\n  deleteEmployee(id:string) {\r\n    this.store.dispatch(new DeleteEmployee(id));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./delete-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-body\">Do you really want to remove this employee ?</div>\r\n<div class=\"modal-footer\">\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-danger\"\r\n    (click)=\"deleteEmployee(id); bsModalRef.hide()\"\r\n  >\r\n    Remove\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"bsModalRef.hide()\">\r\n    Cancel\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "DirectiveDemoComponent",
            "id": "component-DirectiveDemoComponent-c86065f054bdfe4c9ffaf7cc98984f80",
            "file": "src/app/components/main/directive-demo/directive-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-directive-demo",
            "styleUrls": [
                "./directive-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./directive-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedColor",
                    "defaultValue": "'#000000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "applyColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-directive-demo',\r\n  templateUrl: './directive-demo.component.html',\r\n  styleUrls: ['./directive-demo.component.scss'],\r\n})\r\nexport class DirectiveDemoComponent implements OnInit {\r\n  selectedColor: string = '#000000';\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  applyColor(color:string) {\r\n    this.selectedColor = color;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$grey: #8080807a;\r\n.directiveDemoDiv {\r\n  border: 1px solid $grey;\r\n  padding: 15px;\r\n  width: 37%;\r\n\r\n  .display-color {\r\n    width: 150px;\r\n    height: 150px;\r\n  }\r\n  .color-picker {\r\n    border: 1px solid $grey;\r\n    padding: 15px;\r\n    .form-group {\r\n      display: flex;\r\n      align-items: center;\r\n      input {\r\n        width: 16%;\r\n        margin: 0px 8px;\r\n        height: 29px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./directive-demo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3>Directive Demo</h3>\r\n<div class=\"directiveDemoDiv w-30\">\r\n  <h4>Directive Demo Controller</h4>\r\n  <div class=\"display-color\" [appColorPicker]=\"selectedColor\"></div>\r\n  Selected Color: {{ selectedColor }}\r\n  <div class=\"color-picker\">\r\n    <h4>\"Color-Picker\" Directive</h4>\r\n    <div class=\"form-group\">\r\n      Select your favorite color:\r\n      <input type=\"color\" class=\"form-control\" name=\"favColor\" #favColor />\r\n      <button (click)=\"applyColor(favColor.value)\">Apply</button>\r\n    </div>\r\n    <br />\r\n    <p>\r\n      When click on <b><i>\"Apply\"</i></b> Button Selected favorite color should\r\n      fill in Square & show its Hex Code in\r\n      <b><i>\"Selected Color\"</i></b> Label(in \"Directive Demo Controller\")\r\n      outside of Color-Picker Directive.\r\n    </p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "editEmployeeComponent",
            "id": "component-editEmployeeComponent-56b43cd12085e7bdf6b24ebcc3b4cc91",
            "file": "src/app/components/main/employees/edit-employee/edit-employee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-edit-employee",
            "styleUrls": [
                "./edit-employee.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-employee.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "editUserForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "employeeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Employee } from '../../../../state/employeeState/employee';\r\nimport { Store } from '@ngxs/store';\r\nimport { UpdateEmployee } from '../../../../state/employeeState/employee.action';\r\n\r\n@Component({\r\n  selector: 'app-add-edit-employee',\r\n  templateUrl: './edit-employee.component.html',\r\n  styleUrls: ['./edit-employee.component.scss'],\r\n})\r\nexport class editEmployeeComponent implements OnInit {\r\n  modalRef: BsModalRef;\r\n  id: string;\r\n  employeeData: Employee;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    public bsModalRef: BsModalRef,\r\n    private store: Store\r\n  ) {}\r\n\r\n  editUserForm: FormGroup;\r\n  ngOnInit(): void {\r\n    this.editUserForm = this.fb.group({\r\n      name: [this.employeeData?.name, Validators.required],\r\n      email: [\r\n        this.employeeData?.email,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'),\r\n        ],\r\n      ],\r\n      contact: [this.employeeData?.contact, Validators.required],\r\n    });\r\n  }\r\n\r\n  updateUser(id:string) : void {\r\n    const FormData = this.editUserForm.value;\r\n    const data = {\r\n      id: id,\r\n      name: FormData.name,\r\n      email: FormData.email,\r\n      contact: FormData.contact,\r\n    };\r\n    this.store.dispatch(new UpdateEmployee(id, data));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n  padding: 4px 2px;\r\n  width: 8%;\r\n  font-size: 17px;\r\n  text-align-last: right;\r\n}\r\n",
                    "styleUrl": "./edit-employee.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h3 class=\"modal-title\" id=\"signUpFormLabel\">Update Employee</h3>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <form [formGroup]=\"editUserForm\" (ngSubmit)=\"updateUser(id)\">\r\n    <div class=\"form-group\">\r\n      <div class=\"inputDiv w-100 d-inline-flex mb-2\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          formControlName=\"name\"\r\n          placeholder=\"Full Name\"\r\n        />\r\n        <span\r\n          ><i class=\"fa fa-check\" *ngIf=\"editUserForm.controls.name.valid\"></i\r\n        ></span>\r\n      </div>\r\n      <div class=\"inputDiv w-100 d-inline-flex mb-2\">\r\n        <input\r\n          type=\"email\"\r\n          class=\"form-control\"\r\n          formControlName=\"email\"\r\n          placeholder=\"Email\"\r\n        />\r\n        <span\r\n          ><i class=\"fa fa-check\" *ngIf=\"editUserForm.controls.email.valid\"></i\r\n        ></span>\r\n      </div>\r\n\r\n      <div class=\"inputDiv w-100 d-inline-flex mb-2\">\r\n        <input\r\n          type=\"tel\"\r\n          class=\"form-control\"\r\n          formControlName=\"contact\"\r\n          placeholder=\"Contact no\"\r\n        />\r\n        <span\r\n          ><i\r\n            class=\"fa fa-check\"\r\n            *ngIf=\"editUserForm.controls.contact.valid\"\r\n          ></i\r\n        ></span>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button\r\n    type=\"button\"\r\n    [disabled]=\"this.editUserForm.invalid\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"updateUser(id); bsModalRef.hide()\"\r\n  >\r\n    Save\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-warning\" (click)=\"bsModalRef.hide()\">\r\n    Cancel\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "EmployeesComponent",
            "id": "component-EmployeesComponent-9d694a9c9dd0a2466e5a90776b188bff",
            "file": "src/app/components/main/employees/employees.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employees",
            "styleUrls": [
                "./employees.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employees.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addEmployeeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAddEmployeeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { AddEmployeeComponent } from './add-employee/add-employee.component';\r\n\r\n@Component({\r\n  selector: 'app-employees',\r\n  templateUrl: './employees.component.html',\r\n  styleUrls: ['./employees.component.scss'],\r\n})\r\nexport class EmployeesComponent implements OnInit {\r\n  constructor(private fb: FormBuilder, private modalService: BsModalService) {}\r\n  addEmployeeForm: FormGroup;\r\n  modalRef: BsModalRef;\r\n  ngOnInit(): void {\r\n    this.addEmployeeForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', Validators.required],\r\n      contact: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  openAddEmployeeModal(): void {\r\n    this.modalRef = this.modalService.show(AddEmployeeComponent);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mainContent {\r\n  padding: 10px;\r\n  border-left: 1px solid #dfdfdf;\r\n  border-right: 1px solid #dfdfdf;\r\n  border-bottom: 1px solid #dfdfdf;\r\n}\r\n\r\n",
                    "styleUrl": "./employees.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\r\n  <div class=\"card-header\"><h5>Employees</h5></div>\r\n  <div class=\"card-body\">\r\n    <div class=\"pull-right\">\r\n      <span (click)=\"openAddEmployeeModal()\" class=\"fa fa-plus\"></span>\r\n    </div>\r\n    <ul class=\"nav nav-tabs\">\r\n      <li class=\"nav-item\">\r\n        <a\r\n          class=\"nav-link active\"\r\n          data-toggle=\"tab\"\r\n          routerLink=\"grid\"\r\n          routerLinkActive=\"active\"\r\n          >Grid</a\r\n        >\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a\r\n          class=\"nav-link\"\r\n          data-toggle=\"tab\"\r\n          routerLink=\"list\"\r\n          routerLinkActive=\"active\"\r\n          >List</a\r\n        >\r\n      </li>\r\n    </ul>\r\n\r\n    <!-- Tab panes -->\r\n    <div class=\"mainContent\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-b7d580c86627a4b6cce702edd2099365",
            "file": "src/app/components/main/employees/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-grid",
            "styleUrls": [
                "./grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activePage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dataToDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Employee[]>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "EmployeeState.getEmployee"
                        }
                    ]
                },
                {
                    "name": "employeesData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Employee[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "employeeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmployeeService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pagesize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "totalPageCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ChangePageSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayActivePage",
                    "args": [
                        {
                            "name": "activePageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activePageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDeleteEmployeeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditEmployeeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Observable } from 'rxjs';\r\nimport { getEmployee } from '../../../../state/employeeState/employee.action';\r\nimport { EmployeeState } from '../../../../state/employeeState/employee.state';\r\nimport { Employee } from './../../../../state/employeeState/employee';\r\nimport { EmployeeService } from '../../../../services/employee.service';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-grid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: ['./grid.component.scss'],\r\n})\r\nexport class GridComponent implements OnInit {\r\n  modalRef: BsModalRef;\r\n  activePage: number = 1;\r\n  totalRecords: number = 0;\r\n  pagesize: number = 5;\r\n  employeesData: Employee[];\r\n  dataToDisplay: Employee[];\r\n  totalPageCount: number;\r\n\r\n  constructor(\r\n    public store: Store,\r\n    public employeeService: EmployeeService,\r\n    public ref: ChangeDetectorRef\r\n  ) {}\r\n  @Select(EmployeeState.getEmployee) employee: Observable<Employee[]>;\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(new getEmployee());\r\n    this.totalPageCount = this.getPageCount();\r\n    this.pagination();\r\n  }\r\n  ngAfterContentChecked(): void {\r\n    this.ref.detectChanges();\r\n  }\r\n  displayActivePage(activePageNumber: number) {\r\n    this.activePage = activePageNumber;\r\n    this.totalPageCount = this.getPageCount();\r\n    this.pagination();\r\n  }\r\n\r\n  ChangePageSize(size, pageNo): void {\r\n    this.pagesize = size;\r\n    this.activePage = pageNo;\r\n    this.totalPageCount = this.getPageCount();\r\n    this.pagination();\r\n  }\r\n\r\n  pagination(): void {\r\n    this.employee.subscribe((val) => {\r\n      this.totalRecords = val.length;\r\n      this.employeesData = val;\r\n      const lastIndex = this.activePage * this.pagesize;\r\n      const firstIndex = (this.activePage - 1) * this.pagesize;\r\n      this.dataToDisplay = this.employeesData.slice(firstIndex, lastIndex);\r\n    });\r\n  }\r\n  getPageCount(): number {\r\n    return this.employeeService.getPageCount(this.totalRecords, this.pagesize);\r\n  }\r\n\r\n  openEditEmployeeModal(id: string): void {\r\n    this.employeeService.openEditEmployeeModal(id);\r\n  }\r\n\r\n  openDeleteEmployeeModal(id: string): void {\r\n    this.employeeService.openDeleteEmployeeModal(id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\r\n  margin-top: 26px;\r\n}\r\n.nav-head {\r\n  border: 1px solid;\r\n}\r\n.navbar {\r\n  border: 1px solid #dee2e6;\r\n  padding: 8px 13px;\r\n  margin: 19px 3px;\r\n}\r\n\r\n.profileImg {\r\n  font-size: 72px;\r\n}\r\ni {\r\n  padding: 6px;\r\n}\r\n.icons {\r\n  font-size: 18px;\r\n  font-weight: bolder;\r\n}\r\n\r\nh4,\r\nh5 {\r\n  line-height: 1.1;\r\n}\r\na {\r\n  color: black;\r\n}\r\n.card {\r\n  margin-bottom: 20px;\r\n}\r\n.gridItems {\r\n  .navbar-brand {\r\n    font-size: 17px;\r\n    span {\r\n      color: rgb(133 133 134);\r\n    }\r\n  }\r\n  .collapse {\r\n    font-weight: 600;\r\n  }\r\n}\r\n",
                    "styleUrl": "./grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"gridItems\">\r\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <span class=\"navbar-brand\">\r\n      <span><b>Total: </b> {{ activePage }} of {{ totalPageCount }}</span>\r\n      <span> | <b>Page: </b>{{ activePage }}</span>\r\n    </span>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n      <ul class=\"navbar-nav\">\r\n        <li class=\"nav-item dropdown\">\r\n          <a\r\n            class=\"nav-link dropdown-toggle\"\r\n            data-bs-toggle=\"dropdown\"\r\n            role=\"button\"\r\n            aria-expanded=\"false\"\r\n            >Page size : {{ pagesize }}\r\n          </a>\r\n          <ul class=\"dropdown-menu\">\r\n            <li>\r\n              <a class=\"dropdown-item\" (click)=\"ChangePageSize(5, 1)\">5</a>\r\n            </li>\r\n            <li>\r\n              <a class=\"dropdown-item\" (click)=\"ChangePageSize(10, 1)\">10</a>\r\n            </li>\r\n            <li>\r\n              <a class=\"dropdown-item\" (click)=\"ChangePageSize(15, 1)\">15</a>\r\n            </li>\r\n            <li>\r\n              <a class=\"dropdown-item\" (click)=\"ChangePageSize(20, 1)\">20</a>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n\r\n  <div class=\"row\">\r\n    <ng-container *ngFor=\"let data of dataToDisplay\">\r\n      <div class=\"col-lg-3 col-sm-6 col-md-4\">\r\n        <div class=\"card text-center\">\r\n          <i class=\"fa fa-user profileImg\"></i>\r\n          <h4>{{ data.name }}</h4>\r\n          <h5>{{ data.email }}</h5>\r\n          <h5>{{ data.contact }}</h5>\r\n          <span>\r\n            <a (click)=\"openEditEmployeeModal(data.id)\">\r\n              <i class=\"fa fa-edit icons text-primary\"></i>\r\n            </a>\r\n            <a\r\n              data-bs-toggle=\"modal\"\r\n              (click)=\"openDeleteEmployeeModal(data.id)\"\r\n            >\r\n              <i class=\"fa fa-trash icons text-danger\"></i>\r\n            </a>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n  <div class=\"row\">\r\n    <app-pagination\r\n      [totalRecords]=\"totalRecords\"\r\n      [recordsPerPage]=\"pagesize\"\r\n      (onPageChange)=\"displayActivePage($event)\"\r\n    ></app-pagination>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-7a687e5b5d0c83f0f25fc5429cfd983b",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "viewSignUpButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { SignupComponent } from '../auth-pages/signup/signup.component';\r\nimport { AuthService } from './../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  viewSignUpButton;\r\n  modalRef: BsModalRef;\r\n  btnTitle;\r\n  constructor(\r\n    private modalService: BsModalService,\r\n    private authService: AuthService,\r\n    private routes: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.authService.authentication.subscribe((val) => {\r\n      if (val) {\r\n        this.viewSignUpButton = false;\r\n        this.btnTitle = val['isAdmin'] ? 'Admin' : 'User';\r\n      } else {\r\n        this.viewSignUpButton = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  openModal(): void {\r\n    this.modalRef = this.modalService.show(SignupComponent);\r\n  }\r\n\r\n  signOut(): void {\r\n    this.authService.authentication.next({});\r\n    this.authService.removeAuthUser();\r\n    this.viewSignUpButton = true;\r\n    this.routes.navigate(['/login']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar {\r\n  border-radius: 0px;\r\n}\r\nh2 {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  font-size: 34px;\r\n  margin-top: 14px;\r\n  margin-bottom: 4px;\r\n  margin-left: 5px;\r\n  line-height: 1.1;\r\n  color: white;\r\n}\r\n.settingBtn {\r\n  margin-top: auto;\r\n  margin-right: 25px;\r\n  min-width: 130px;\r\n}\r\n\r\nsmall {\r\n  color: #777;\r\n  font-size: 65%;\r\n}\r\n.navbar-nav .dropdown-menu {\r\n  position: absolute;\r\n  margin-left: -27px;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routes",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routes",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-dark bg-dark\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"navbar-header\">\r\n      <h2>Angular - Bootstrap <small>App</small></h2>\r\n    </div>\r\n\r\n    <div *ngIf=\"viewSignUpButton; else viewSettingButton\">\r\n      <ul class=\"nav navbar-nav navbar-right settingBtn\">\r\n        <div class=\"dropdown\">\r\n          <button class=\"btn btn-primary dropdown-toggle\" (click)=\"openModal()\">\r\n            Sign Up\r\n          </button>\r\n        </div>\r\n      </ul>\r\n    </div>\r\n    <ng-template #viewSettingButton>\r\n      <ul class=\"nav navbar-nav navbar-right settingBtn\">\r\n        <div class=\"btn-group\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary dropdown-toggle settingBtn\"\r\n            data-bs-toggle=\"dropdown\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            {{ btnTitle }}\r\n          </button>\r\n          <ul class=\"dropdown-menu\">\r\n            <li>\r\n              <button class=\"dropdown-item\" (click)=\"signOut()\">\r\n                Sign Out\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </ul>\r\n    </ng-template>\r\n  </div>\r\n</nav>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0099af7e1595085fa82cd7bda848277c",
            "file": "src/app/components/main/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".carousel-calc {\r\n  height: calc(100% - 74px) !important;\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  id=\"carouselExampleIndicators\"\r\n  class=\"carousel slide h-100 carousel-calc\"\r\n  data-bs-ride=\"carousel\"\r\n>\r\n  <div class=\"carousel-indicators\">\r\n    <button\r\n      type=\"button\"\r\n      data-bs-target=\"#carouselExampleIndicators\"\r\n      data-bs-slide-to=\"0\"\r\n      class=\"active\"\r\n      aria-current=\"true\"\r\n      aria-label=\"Slide 1\"\r\n    ></button>\r\n    <button\r\n      type=\"button\"\r\n      data-bs-target=\"#carouselExampleIndicators\"\r\n      data-bs-slide-to=\"1\"\r\n      aria-label=\"Slide 2\"\r\n    ></button>\r\n    <button\r\n      type=\"button\"\r\n      data-bs-target=\"#carouselExampleIndicators\"\r\n      data-bs-slide-to=\"2\"\r\n      aria-label=\"Slide 3\"\r\n    ></button>\r\n  </div>\r\n  <div class=\"carousel-inner h-100\">\r\n    <div class=\"carousel-item active h-100 \">\r\n      <img\r\n        class=\"h-100 w-100\"\r\n        src=\"assets/homeImages/dogs.jpg\"\r\n        data-bs-interval=\"1000\"\r\n      />\r\n      <div class=\"carousel-caption d-none d-md-block\">\r\n        <h5>Man's Best Friend</h5>\r\n        <p>\r\n          A dog is the only thing on earth that loves you more than he loves\r\n          himself.\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div class=\"carousel-item h-100\">\r\n      <img src=\"assets/homeImages/nature.jpg\" class=\"h-100 w-100\" alt=\"...\" />\r\n      <div class=\"carousel-caption d-none d-md-block\">\r\n        <h5>Nature is best.</h5>\r\n        <p>If you truly nature, you will find beauty everywhere!</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"carousel-item h-100\">\r\n      <img src=\"assets/homeImages/toyBus.jpg\" class=\"h-100 w-100\" alt=\"...\" />\r\n      <div class=\"carousel-caption d-none d-md-block\">\r\n        <h5>Third slide label</h5>\r\n        <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button\r\n    class=\"carousel-control-prev\"\r\n    type=\"button\"\r\n    data-bs-target=\"#carouselExampleIndicators\"\r\n    data-bs-slide=\"prev\"\r\n  >\r\n    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"visually-hidden\">Previous</span>\r\n  </button>\r\n  <button\r\n    class=\"carousel-control-next\"\r\n    type=\"button\"\r\n    data-bs-target=\"#carouselExampleIndicators\"\r\n    data-bs-slide=\"next\"\r\n  >\r\n    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"visually-hidden\">Next</span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "LeftSideBarComponent",
            "id": "component-LeftSideBarComponent-4d6b8ce8836bff205cf62ea96ff5ff47",
            "file": "src/app/components/main/left-side-bar/left-side-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-left-side-bar",
            "styleUrls": [
                "./left-side-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./left-side-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-left-side-bar',\r\n  templateUrl: './left-side-bar.component.html',\r\n  styleUrls: ['./left-side-bar.component.scss'],\r\n})\r\nexport class LeftSideBarComponent implements OnInit {\r\n  constructor(private route: Router) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu {\r\n  text-align-last: left;\r\n  font-size: 17px;\r\n}\r\n",
                    "styleUrl": "./left-side-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-3 menu\">\r\n  <div class=\"nav flex-column nav-pills me-3\" id=\"v-pills-tab\">\r\n    <a class=\"nav-link\" routerLink=\"home\" routerLinkActive=\"active\">Home</a>\r\n    <a class=\"nav-link\" routerLink=\"employee\" routerLinkActive=\"active\"\r\n      >Employees</a\r\n    >\r\n    <a class=\"nav-link\" routerLink=\"directives-demo\" routerLinkActive=\"active\"\r\n      >Directive Demo</a\r\n    >\r\n    <a\r\n      class=\"nav-link\"\r\n      routerLink=\"contact-us\"\r\n      type=\"button\"\r\n      routerLinkActive=\"active\"\r\n      >Contact us</a\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-e65f04a8c7df0aeea3207ce510f37930",
            "file": "src/app/components/main/employees/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activePage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dataToDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "employee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Employee[]>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "EmployeeState.getEmployee"
                        }
                    ]
                },
                {
                    "name": "employeeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmployeeService",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "pagesize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tableHeadData",
                    "defaultValue": "['SrNo', 'Name', 'Email', 'Contact', 'Id', 'Action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "totalPageCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ChangePageSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageNo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayActivePage",
                    "args": [
                        {
                            "name": "activePageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activePageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDeleteEmployeeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditEmployeeModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { getEmployee } from './../../../../state/employeeState/employee.action';\r\nimport { Observable } from 'rxjs';\r\nimport { EmployeeState } from '../../../../state/employeeState/employee.state';\r\nimport { Employee } from '../../../../state/employeeState/employee';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { EmployeeService } from '../../../../services/employee.service';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n})\r\nexport class ListComponent implements OnInit {\r\n  //pagination\r\n  activePage: number = 1;\r\n  totalRecords: number = 0;\r\n  pagesize: number = 5;\r\n  totalPageCount: Number;\r\n\r\n  //data\r\n  tableHeadData = ['SrNo', 'Name', 'Email', 'Contact', 'Id', 'Action'];\r\n  dataToDisplay;\r\n\r\n  modalRef: BsModalRef;\r\n  constructor(\r\n    public store: Store,\r\n    public employeeService: EmployeeService,\r\n    private ref: ChangeDetectorRef\r\n  ) {}\r\n  @Select(EmployeeState.getEmployee) employee: Observable<Employee[]>;\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(new getEmployee());\r\n    this.totalPageCount = this.getPageCount();\r\n    this.pagination();\r\n  }\r\n  ngAfterContentChecked(): void {\r\n    this.ref.detectChanges();\r\n  }\r\n\r\n  displayActivePage(activePageNumber: number): void {\r\n    this.activePage = activePageNumber;\r\n    this.totalPageCount = this.getPageCount();\r\n    this.pagination();\r\n  }\r\n\r\n  ChangePageSize(size, pageNo): void {\r\n    this.pagesize = size;\r\n    this.activePage = pageNo;\r\n    this.totalPageCount = this.getPageCount();\r\n    this.pagination();\r\n  }\r\n  pagination(): void {\r\n    let employeesData: Employee[];\r\n    this.employee.subscribe((val) => {\r\n      this.totalRecords = val.length;\r\n      employeesData = val;\r\n      const lastIndex = this.activePage * this.pagesize;\r\n      const firstIndex = (this.activePage - 1) * this.pagesize;\r\n      this.dataToDisplay = employeesData.slice(firstIndex, lastIndex);\r\n    });\r\n  }\r\n\r\n  getPageCount(): number {\r\n    return this.employeeService.getPageCount(this.totalRecords, this.pagesize);\r\n  }\r\n  openEditEmployeeModal(id: number): void {\r\n    this.employeeService.openEditEmployeeModal(id);\r\n  }\r\n  openDeleteEmployeeModal(id: number): void {\r\n    this.employeeService.openDeleteEmployeeModal(id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pageCount {\r\n  padding: 10px 5px;\r\n}\r\n.dropdown-menu {\r\n  margin-left: -28px;\r\n}\r\n",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "employeeService",
                        "type": "EmployeeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row pageCount\">\r\n  <div class=\"col-md-6\">\r\n    <span><b>Total:</b> {{ activePage }} of {{ totalPageCount }}</span\r\n    ><br />\r\n    <span><b>Page:</b> {{ activePage }}</span>\r\n  </div>\r\n  <div class=\"col-md-6 text-end\">\r\n    <div class=\"btn-group\" dropdown>\r\n      <button\r\n        id=\"button-basic\"\r\n        dropdownToggle\r\n        type=\"button\"\r\n        class=\"btn border dropdown-toggle\"\r\n        aria-controls=\"dropdown-basic\"\r\n      >\r\n        Page Size : {{ pagesize }} <span class=\"caret\"></span>\r\n      </button>\r\n      <ul\r\n        id=\"dropdown-basic\"\r\n        *dropdownMenu\r\n        class=\"dropdown-menu\"\r\n        role=\"menu\"\r\n        aria-labelledby=\"button-basic\"\r\n      >\r\n        <li role=\"menuitem\">\r\n          <a class=\"dropdown-item\" (click)=\"ChangePageSize(5, 1)\">5</a>\r\n        </li>\r\n        <li role=\"menuitem\">\r\n          <a class=\"dropdown-item\" (click)=\"ChangePageSize(10, 1)\">10</a>\r\n        </li>\r\n        <li role=\"menuitem\">\r\n          <a class=\"dropdown-item\" (click)=\"ChangePageSize(15, 1)\">15</a>\r\n        </li>\r\n        <li role=\"menuitem\">\r\n          <a class=\"dropdown-item\" (click)=\"ChangePageSize(20, 1)\">20</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <app-table\r\n    [dataToDisplay]=\"dataToDisplay\"\r\n    [theadData]=\"tableHeadData\"\r\n    (openEditEmployeeModal)=\"openEditEmployeeModal($event)\"\r\n    (openDeleteEmployeeModal)=\"openDeleteEmployeeModal($event)\"\r\n  ></app-table>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <app-pagination\r\n    [totalRecords]=\"totalRecords\"\r\n    [recordsPerPage]=\"pagesize\"\r\n    (onPageChange)=\"displayActivePage($event)\"\r\n  ></app-pagination>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-62b7f9ad3736c619772f969c1f26b596",
            "file": "src/app/components/auth-pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inValidEmailPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "userLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: any;\r\n  inValidEmailPassword:boolean = false;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private routes: Router\r\n  ) {\r\n    loginForm: FormGroup;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      email: ['',Validators.required],\r\n      password: ['',Validators.required],\r\n    });\r\n  }\r\n  userLogin(): void {\r\n    const checkAuth = this.authService.checkLogin(this.loginForm.value);\r\n    if (checkAuth) {\r\n      this.routes.navigate(['/main/home']);\r\n    } else {\r\n      this.inValidEmailPassword = true;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\n.passwordDiv {\r\n  margin-top: 22px;\r\n  margin-bottom: 22px;\r\n}\r\n#loginForm {\r\n  border: 1px solid hsl(0, 0%, 87%);\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  margin: 50px auto;\r\n  width: 35%;\r\n}\r\n#logoRow {\r\n  text-align: center;\r\n  margin: 30px auto;\r\n}\r\n.model-header {\r\n  padding: 13px 8px;\r\n}\r\nh3 {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routes",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routes",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" id=\"logoRow\">\r\n  <a href=\"\">\r\n    <img src=\"./assets/homeImages/logo.png\" />\r\n  </a>\r\n</div>\r\n<div class=\"container\">\r\n  <div class=\"row\" id=\"loginForm\">\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"userLogin()\">\r\n      <div class=\"modal-header\">\r\n        <h3>Login</h3>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div align=\"center\">\r\n          <div class=\"form-goup\">\r\n            <input\r\n              class=\"form-control\"\r\n              type=\"email\"\r\n              formControlName=\"email\"\r\n              placeholder=\"Email Id\"\r\n            />\r\n          </div>\r\n          <div class=\"form-goup passwordDiv\">\r\n            <input\r\n              class=\"form-control\"\r\n              type=\"password\"\r\n              formControlName=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <small class=\"text-danger\" *ngIf=\"inValidEmailPassword\"\r\n          >Invalid Email or Password.</small\r\n        >\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <div class=\"form-goup\">\r\n          <button type=\"submit\" [disabled]=\"this.loginForm.invalid\" class=\"btn btn-primary\">Login</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-3b9042085111ddfee44df199d5ec04d0",
            "file": "src/app/components/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserData[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "UserDataState.getUsers"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { UserData } from '../../models/userData';\r\nimport { getUsers } from '../../state/userState/user.action';\r\nimport { UserDataState } from './../../state/userState/user.state';\r\nimport { AuthService } from './../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss'],\r\n})\r\nexport class MainComponent implements OnInit {\r\n  constructor(private store: Store, private authService: AuthService) {\r\n  }\r\n  @Select(UserDataState.getUsers) users: Observable<UserData[]>;\r\n\r\n  ngOnInit(): void {\r\n    this.store.dispatch(new getUsers());\r\n    let items;\r\n    this.users.subscribe((val) => (items = val));\r\n    this.authService.authentication.next(items);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row w-100\">\r\n  <div class=\"col-md-2 p-2\">\r\n    <app-left-side-bar></app-left-side-bar>\r\n  </div>\r\n  <div class=\"col-md-10 p-2 border-start\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-5118addc8f8e13c87887ea9284bbecdc",
            "file": "src/app/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "recordsPerPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number"
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getArrayOfPage",
                    "args": [
                        {
                            "name": "pageCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  EventEmitter,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.scss'],\r\n})\r\nexport class PaginationComponent implements OnChanges {\r\n  @Input() totalRecords = 0;\r\n  @Input() recordsPerPage = 0;\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  public pages: number[] = [];\r\n  activePage: number;\r\n  constructor() {}\r\n\r\n  ngOnChanges(): void {\r\n    const pageCount = this.getPageCount();\r\n    this.pages = this.getArrayOfPage(pageCount);\r\n    this.activePage = 1;\r\n    this.onPageChange.emit(1);\r\n  }\r\n\r\n  getPageCount(): number {\r\n    let totalPage = 0;\r\n    if (this.totalRecords > 0 && this.recordsPerPage > 0) {\r\n      const pageCount = this.totalRecords / this.recordsPerPage;\r\n      const roundedPageCount = Math.floor(pageCount);\r\n      totalPage =\r\n        roundedPageCount < pageCount ? roundedPageCount + 1 : roundedPageCount;\r\n    }\r\n    return totalPage;\r\n  }\r\n\r\n  getArrayOfPage(pageCount: number): number[] {\r\n    const pageArray = [];\r\n\r\n    if (pageCount > 0) {\r\n      for (let i = 1; i <= pageCount; i++) {\r\n        pageArray.push(i);\r\n      }\r\n    }\r\n    return pageArray;\r\n  }\r\n  onClickPage(pageNumber: number): void {\r\n    if (pageNumber >= 1 && pageNumber <= this.pages.length) {\r\n      this.activePage = pageNumber;\r\n      this.onPageChange.emit(this.activePage);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pagination{\r\n  place-content: center;\r\n}\r\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<nav aria-label=\"page navigation example\">\r\n  <ul class=\"pagination\">\r\n    <li class=\"page-item\" (click)=\"onClickPage(activePage - 1)\">\r\n      <a class=\"page-link\">« </a>\r\n    </li>\r\n    <li\r\n      class=\"page-item\"\r\n      [ngClass]=\"{ active: activePage === item }\"\r\n      *ngFor=\"let item of pages\"\r\n      (click)=\"onClickPage(item)\"\r\n    >\r\n      <a class=\"page-link\">{{ item }}</a>\r\n    </li>\r\n    <li class=\"page-item\" (click)=\"onClickPage(activePage + 1)\">\r\n      <a class=\"page-link\"> »</a>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n"
        },
        {
            "name": "SignupComponent",
            "id": "component-SignupComponent-81a5baf59deead2826fb98e23492b98b",
            "file": "src/app/components/auth-pages/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signup",
            "styleUrls": [
                "./signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bsModalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "signUpForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getControls",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { AuthService } from './../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss'],\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  modalRef: BsModalRef;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    public bsModalRef: BsModalRef\r\n  ) {}\r\n\r\n  signUpForm: FormGroup;\r\n  ngOnInit(): void {\r\n    this.signUpForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'),\r\n        ],\r\n      ],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n    });\r\n  }\r\n  getControls():any {\r\n    return this.signUpForm.controls;\r\n  }\r\n  register(): void {\r\n    this.authService.register(this.signUpForm.value, false);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".inputDiv{\r\n  width: 100%;\r\n    display: inline-flex;\r\n    margin-bottom: 15px;\r\n}\r\nspan{\r\n  padding: 4px 2px;\r\n  width: 8%;\r\n  font-size: 17px;\r\n  text-align-last: right;\r\n}\r\n",
                    "styleUrl": "./signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bsModalRef",
                        "type": "BsModalRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Modal -->\r\n<div class=\"modal-header\">\r\n  <h3 class=\"modal-title\" id=\"signUpFormLabel\">Sign Up</h3>\r\n</div>\r\n\r\n<div class=\"modal-body\">\r\n  <form [formGroup]=\"signUpForm\" (ngSubmit)=\"register()\">\r\n    <div class=\"form-group\">\r\n      <div class=\"inputDiv\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          formControlName=\"name\"\r\n          placeholder=\"Full Name\"\r\n          required\r\n        />\r\n        <span\r\n          ><i class=\"fa fa-check\" *ngIf=\"getControls().name.valid\"></i\r\n        ></span>\r\n      </div>\r\n      <div class=\"inputDiv\">\r\n        <input\r\n          type=\"email\"\r\n          class=\"form-control\"\r\n          formControlName=\"email\"\r\n          placeholder=\"Email\"\r\n        />\r\n        <span\r\n          ><i class=\"fa fa-check\" *ngIf=\"getControls().email.valid\"></i\r\n        ></span>\r\n      </div>\r\n      <div class=\"inputDiv\">\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n          formControlName=\"password\"\r\n          placeholder=\"Password\"\r\n        />\r\n        <span\r\n          ><i class=\"fa fa-check\" *ngIf=\"getControls().password.valid\"></i\r\n        ></span>\r\n      </div>\r\n      <div class=\"inputDiv\">\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n          formControlName=\"confirmPassword\"\r\n          placeholder=\"Confirm Password\"\r\n        />\r\n        <span\r\n          ><i\r\n            class=\"fa fa-check\"\r\n            *ngIf=\"getControls().confirmPassword.valid\"\r\n          ></i\r\n        ></span>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button\r\n    type=\"button\"\r\n    [disabled]=\"this.signUpForm.invalid\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"register(); bsModalRef.hide()\"\r\n  >\r\n    Sign Up\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-warning\" (click)=\"bsModalRef.hide()\">\r\n    Cancel\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-d0e1eebf319b212f22339aab99c3e614",
            "file": "src/app/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataToDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                },
                {
                    "name": "theadData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "openDeleteEmployeeModal",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "openEditEmployeeModal",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditModal",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n})\r\nexport class TableComponent implements OnInit {\r\n  @Input() dataToDisplay;\r\n  @Input() theadData;\r\n  @Output() openEditEmployeeModal: EventEmitter<number> = new EventEmitter();\r\n  @Output() openDeleteEmployeeModal: EventEmitter<number> = new EventEmitter();\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  openEditModal(id:number): void {\r\n    this.openEditEmployeeModal.emit(id);\r\n  }\r\n  deleteModal(id:number): void {\r\n    this.openDeleteEmployeeModal.emit(id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table {\r\n  thead {\r\n    th {\r\n      color: black;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<table class=\"table table-bordered\">\r\n  <thead class=\"text-primary\">\r\n    <tr>\r\n      <ng-container *ngFor=\"let title of theadData\">\r\n        <th>{{ title }}</th>\r\n      </ng-container>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <ng-container *ngFor=\"let item of dataToDisplay; let i = index\">\r\n      <tr>\r\n        <td>{{ i + 1 }}</td>\r\n        <td>{{ item.name }}</td>\r\n        <td>{{ item.email }}</td>\r\n        <td>{{ item.contact }}</td>\r\n        <td>{{ item.id }}</td>\r\n        <td class=\"text-center\">\r\n          <span>\r\n            <a (click)=\"openEditModal(item.id)\"\r\n              ><i class=\"fa fa-edit icons text-primary\"></i\r\n            ></a>\r\n            |\r\n            <a (click)=\"deleteModal(item.id)\">\r\n              <i class=\"fa fa-trash icons text-danger\"></i>\r\n            </a>\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    </ng-container>\r\n  </tbody>\r\n</table>\r\n"
        },
        {
            "name": "VideoPlayerComponent",
            "id": "component-VideoPlayerComponent-201797bef36f16ed9c42331754316697",
            "file": "src/app/components/video-player/video-player.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-video-player",
            "styleUrls": [
                "./video-player.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./video-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./video-player.component.scss'],\n})\nexport class VideoPlayerComponent implements OnInit {\n  media;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./video-player.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<vg-player>\n  <vg-overlay-play></vg-overlay-play>\n  <vg-buffering></vg-buffering>\n\n  <vg-scrub-bar>\n      <vg-scrub-bar-current-time></vg-scrub-bar-current-time>\n      <vg-scrub-bar-buffering-time></vg-scrub-bar-buffering-time>\n  </vg-scrub-bar>\n\n  <vg-controls>\n      <vg-play-pause></vg-play-pause>\n      <vg-playback-button></vg-playback-button>\n\n      <vg-time-display vgProperty=\"current\" vgFormat=\"mm:ss\"></vg-time-display>\n\n      <vg-scrub-bar style=\"pointer-events: none;\"></vg-scrub-bar>\n\n      <vg-time-display vgProperty=\"left\" vgFormat=\"mm:ss\"></vg-time-display>\n      <vg-time-display vgProperty=\"total\" vgFormat=\"mm:ss\"></vg-time-display>\n\n      <vg-track-selector></vg-track-selector>\n      <vg-mute></vg-mute>\n      <vg-volume></vg-volume>\n\n      <vg-fullscreen></vg-fullscreen>\n  </vg-controls>\n\n  <video [vgMedia]=\"media' #media id=\"singleVideo\" preload=\"auto\" crossorigin>\n      <source src=\"http://static.videogular.com/assets/videos/videogular.mp4\" type=\"video/mp4\">\n      <source src=\"http://static.videogular.com/assets/videos/videogular.ogg\" type=\"video/ogg\">\n      <source src=\"http://static.videogular.com/assets/videos/videogular.webm\" type=\"video/webm\">\n\n      <track kind=\"subtitles\" label=\"English\" src=\"http://static.videogular.com/assets/subs/pale-blue-dot.vtt\" srclang=\"en\" default>\n      <track kind=\"subtitles\" label=\"Español\" src=\"http://static.videogular.com/assets/subs/pale-blue-dot-es.vtt\" srclang=\"es\">\n  </video>\n</vg-player>\n"
        }
    ],
    "modules": [
        {
            "name": "AddEmployeeModule",
            "id": "module-AddEmployeeModule-73a0c0feef3c44582881d844f3aa94ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/employees/add-employee/add-employee.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AddEmployeeComponent } from './add-employee.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [AddEmployeeComponent],\r\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\r\n  exports: [AddEmployeeComponent],\r\n})\r\nexport class AddEmployeeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddEmployeeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddEmployeeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-99ace3c24e225e9e79961c2bfbc480a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { AuthGuard } from './services/auth.guard';\r\nimport { AuthService } from './services/auth.service';\r\nimport { HeaderModule } from './components/header/header.module';\r\nimport { SignupModule } from './components/auth-pages/signup/signup.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\n//import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { EmployeeService } from './services/employee.service';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { environment } from '../environments/environment';\r\nimport { EmployeeState } from './state/employeeState/employee.state';\r\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\r\nimport { StateService } from './services/state.service';\r\nimport { UserDataState } from './state/userState/user.state';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { VgCoreModule } from '@videogular/ngx-videogular/core';\r\nimport { VgControlsModule } from '@videogular/ngx-videogular/controls';\r\nimport { VgOverlayPlayModule } from '@videogular/ngx-videogular/overlay-play';\r\nimport { VgBufferingModule } from '@videogular/ngx-videogular/buffering';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HeaderModule,\r\n    SignupModule,\r\n    BrowserAnimationsModule,\r\n    ModalModule.forRoot(),\r\n    NgxsModule.forRoot([UserDataState, EmployeeState], {\r\n      developmentMode: !environment.production,\r\n    }),\r\n    VgCoreModule,\r\n    VgControlsModule,\r\n    VgOverlayPlayModule,\r\n    VgBufferingModule ,\r\n    NgxsReduxDevtoolsPluginModule.forRoot(),\r\n    BsDropdownModule.forRoot(),\r\n  ],\r\n  providers: [AuthService, AuthGuard, StateService, EmployeeService],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "EmployeeService"
                        },
                        {
                            "name": "StateService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HeaderModule"
                        },
                        {
                            "name": "SignupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-376efe00b018b483e39439b6d139d183",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './services/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'main', pathMatch: 'full' },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () =>\r\n      \"import('./components/auth-pages/login/login.module').then(\\\n        (m) => m.LoginModule\\\n      )\",\r\n  },\r\n  {\r\n    path: 'main',\r\n    loadChildren: () =>\r\n      \"import('./components/main/main.module').then((m) => m.MainModule)\",\r\n    canActivate: [AuthGuard],\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContactModule",
            "id": "module-ContactModule-0c88da1f08816aa3cf6dac93b0d80f55",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/contact/contact.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContactComponent } from './contact.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst route: Routes = [\r\n  {\r\n    path: '',\r\n    component: ContactComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [ContactComponent],\r\n  imports: [CommonModule, RouterModule.forChild(route)],\r\n})\r\nexport class ContactModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContactComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DeleteModalModule",
            "id": "module-DeleteModalModule-0ceddb716a7d96f304241ae9c096a544",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/employees/delete-modal/delete-modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DeleteModalComponent } from './delete-modal.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [DeleteModalComponent],\r\n  imports: [CommonModule, FormsModule],\r\n  exports: [DeleteModalComponent],\r\n})\r\nexport class DeleteModalModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DeleteModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DeleteModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectiveDemoModule",
            "id": "module-DirectiveDemoModule-73381a0cfd7d4b7f1a0d0ab66ef6a711",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/directive-demo/directive-demo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DirectiveDemoComponent } from './directive-demo.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ColorPickerDirective } from '../../../directives/color-picker.directive';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DirectiveDemoComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [DirectiveDemoComponent, ColorPickerDirective],\r\n  imports: [CommonModule, RouterModule.forChild(routes)],\r\n})\r\nexport class DirectiveDemoModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorPickerDirective"
                        },
                        {
                            "name": "DirectiveDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EditEmployeeModule",
            "id": "module-EditEmployeeModule-2e04a941815ee703b416637e17126760",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/employees/edit-employee/edit-employee.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { editEmployeeComponent } from './edit-employee.component';\r\n\r\n@NgModule({\r\n  declarations: [editEmployeeComponent],\r\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\r\n  exports: [editEmployeeComponent],\r\n})\r\nexport class EditEmployeeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "editEmployeeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "editEmployeeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EmployeesModule",
            "id": "module-EmployeesModule-3f3d5c649d47159f725fdcd902b9eb1c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/employees/employees.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EmployeesComponent } from './employees.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { AddEmployeeModule } from './add-employee/add-employee.module';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: EmployeesComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'grid', pathMatch: 'full' },\r\n      {\r\n        path: 'grid',\r\n        loadChildren: () =>\r\n          \"import('./grid/grid.module').then((m) => m.GridModule)\",\r\n      },\r\n      {\r\n        path: 'list',\r\n        loadChildren: () =>\r\n          \"import('./list/list.module').then((m) => m.ListModule)\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [EmployeesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n    ModalModule,\r\n    AddEmployeeModule,\r\n  ],\r\n})\r\nexport class EmployeesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmployeesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddEmployeeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GridModule",
            "id": "module-GridModule-8dc667d1a21a97d1281abd19c8b88b78",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/employees/grid/grid.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GridComponent } from './grid.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { EditEmployeeModule } from '../edit-employee/edit-employee.module';\r\nimport { PaginationModule } from '../../../../pagination/pagination.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: GridComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [GridComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ModalModule,\r\n    ReactiveFormsModule,\r\n    EditEmployeeModule,\r\n    PaginationModule,\r\n  ],\r\n})\r\nexport class GridModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GridComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "EditEmployeeModule"
                        },
                        {
                            "name": "PaginationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "id": "module-HeaderModule-909a89d5f928f507b7aa02905b1f3738",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HeaderComponent } from './header.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { SignupModule } from '../auth-pages/signup/signup.module';\r\nimport { SignupComponent } from '../auth-pages/signup/signup.component';\r\n\r\n@NgModule({\r\n  declarations: [HeaderComponent, SignupComponent],\r\n\r\n  imports: [CommonModule, ReactiveFormsModule, ModalModule, SignupModule],\r\n  exports: [HeaderComponent],\r\n})\r\nexport class HeaderModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SignupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SignupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-19c19ad6da0d0e2fa954d0460770064b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    component: HomeComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [HomeComponent],\r\n  imports: [CommonModule, RouterModule.forChild(routes)],\r\n})\r\nexport class HomeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LeftSideBarModule",
            "id": "module-LeftSideBarModule-f6a502ecb9d02391d72eb2d7ed356f2d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/left-side-bar/left-side-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LeftSideBarComponent } from './left-side-bar.component';\r\nimport { RouterModule } from '@angular/router';\r\n@NgModule({\r\n  declarations: [LeftSideBarComponent],\r\n  imports: [CommonModule, RouterModule],\r\n  exports: [LeftSideBarComponent],\r\n})\r\nexport class LeftSideBarModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LeftSideBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LeftSideBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListModule",
            "id": "module-ListModule-87c0c3068709f26a99ca53061afa8d1a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/employees/list/list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ListComponent } from './list.component';\r\nimport { TableModule } from '../../../../table/table.module';\r\nimport { PaginationModule } from '../../../../pagination/pagination.module';\r\nimport { EditEmployeeModule } from '../edit-employee/edit-employee.module';\r\nimport { DeleteModalModule } from '../delete-modal/delete-modal.module';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ListComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [ListComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    TableModule,\r\n    PaginationModule,\r\n    EditEmployeeModule,\r\n    DeleteModalModule,\r\n    BsDropdownModule.forRoot()\r\n  ],\r\n})\r\nexport class ListModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DeleteModalModule"
                        },
                        {
                            "name": "EditEmployeeModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-b043ddd5fd25b49e75a34757824152db",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/auth-pages/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n];\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n  ],\r\n})\r\nexport class LoginModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-60a05beebf3a1066433502964c4cc74a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/main/main.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, RouterOutlet, Routes } from '@angular/router';\r\nimport { MainComponent } from './main.component';\r\nimport { LeftSideBarModule } from './left-side-bar/left-side-bar.module';\r\nimport { VideoPlayerModule } from '../video-player/video-player.module';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MainComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'home',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: 'home',\r\n        loadChildren: () =>\r\n          \"import('./home/home.module').then((m) => m.HomeModule)\",\r\n      },\r\n      {\r\n        path: 'employee',\r\n        loadChildren: () =>\r\n          \"import('./employees/employees.module').then((m) => m.EmployeesModule)\",\r\n      },\r\n      {\r\n        path: 'directives-demo',\r\n        loadChildren: () =>\r\n          \"import('./directive-demo/directive-demo.module').then(\\\n            (m) => m.DirectiveDemoModule\\\n          )\",\r\n      },\r\n      {\r\n        path: 'contact-us',\r\n        loadChildren: () =>\r\n          \"import('./contact/contact.module').then((m) => m.ContactModule)\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n@NgModule({\r\n  declarations: [MainComponent],\r\n  imports: [CommonModule, LeftSideBarModule, RouterModule.forChild(routes)],\r\n  exports: [],\r\n})\r\nexport class MainModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LeftSideBarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-409d999c096730d265433dcb0227150a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PaginationComponent } from './pagination.component';\r\n\r\n@NgModule({\r\n  declarations: [PaginationComponent],\r\n  imports: [CommonModule],\r\n  exports: [PaginationComponent],\r\n})\r\nexport class PaginationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SignupModule",
            "id": "module-SignupModule-a0fafdcd5c46ad1f6e97efc91b2a1e41",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/auth-pages/signup/signup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, ReactiveFormsModule,FormsModule],\r\n})\r\nexport class SignupModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-4fd7a4f3d3f20876d4f4af4f1f8ef530",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableComponent } from './table.component';\r\n\r\n@NgModule({\r\n  declarations: [TableComponent],\r\n  imports: [CommonModule],\r\n  exports: [TableComponent],\r\n})\r\nexport class TableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "VideoPlayerModule",
            "id": "module-VideoPlayerModule-d9b6b34c6be195b02022dfd558b88083",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/video-player/video-player.module.ts",
            "methods": [],
            "sourceCode": "import {  NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VideoPlayerComponent } from './video-player.component';\n\nimport { VgCoreModule,  VgMediaElement } from '@videogular/ngx-videogular/core';\nimport { VgControlsModule } from '@videogular/ngx-videogular/controls';\nimport { VgOverlayPlayModule } from '@videogular/ngx-videogular/overlay-play';\nimport { VgBufferingModule } from '@videogular/ngx-videogular/buffering';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [VideoPlayerComponent],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    VgCoreModule,\n    VgControlsModule,\n    VgOverlayPlayModule,\n    VgBufferingModule,\n    VgMediaElement,\n  ],\n  providers: [],\n\n  exports: [VideoPlayerComponent],\n})\nexport class VideoPlayerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "VideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "VgMediaElement"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "VideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/person.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div style=\"width: 100%;\">\r\n<app-pagination\r\n      [totalRecords]=\"totalRecords\"\r\n      [recordsPerPage]=\"recordsPerPage\"\r\n      (onPageChange)=\"displayActivePage($event)\"\r\n    ></app-pagination>\r\n</div>`"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/videoplayer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<div class=\"row\" id=\"videoplayer\" style=\"width: 100%;\"><app-video-player></app-video-player> </div>`"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/person.stories.ts": [
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/person.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div style=\"width: 100%;\">\r\n<app-pagination\r\n      [totalRecords]=\"totalRecords\"\r\n      [recordsPerPage]=\"recordsPerPage\"\r\n      (onPageChange)=\"displayActivePage($event)\"\r\n    ></app-pagination>\r\n</div>`"
                }
            ],
            "src/stories/videoplayer.stories.ts": [
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/videoplayer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<div class=\"row\" id=\"videoplayer\" style=\"width: 100%;\"><app-video-player></app-video-player> </div>`"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "main",
                        "pathMatch": "full"
                    },
                    {
                        "path": "login",
                        "loadChildren": "./components/auth-pages/login/login.module#LoginModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/auth-pages/login/login.module.ts",
                                        "module": "LoginModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LoginComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "LoginModule"
                            }
                        ]
                    },
                    {
                        "path": "main",
                        "loadChildren": "./components/main/main.module#MainModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "MainModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/auth-pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/auth-pages/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/contact/contact.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/directive-demo/directive-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectiveDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/employees/add-employee/add-employee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEmployeeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/employees/delete-modal/delete-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/employees/edit-employee/edit-employee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "editEmployeeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/employees/employees.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/employees/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/employees/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/left-side-bar/left-side-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeftSideBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/video-player/video-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/color-picker.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ColorPickerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/userData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/employee.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EmployeeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StateService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "addNewEmployee",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteEmployee",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "getEmployee",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateEmployee",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EmployeeStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EmployeeState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/state/employeeState/employee.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Employee",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/userState/user.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/userState/user.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "getUsers",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/userState/user.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/userState/user.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserDataStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/userState/user.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserDataState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/person.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/videoplayer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}